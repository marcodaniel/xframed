% \iffalse meta-comment
% !TEX program = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
================================================================
================================================================
Working with the command \fbox or \fcolorbox, one has to
handle page breaks by hand. The present package defines the
environment xframed which automatically deals with page breaks.

Author's name: Marco Daniel
License type: lppl

================================================================
The revision history is printed in the documentation.

================================================================
The current development is available at github:
https://github.com/marcodaniel/xframed

================================================================
The package provides 
 * one dtx files,
 * one Makefile (compiling for Linux/Mac),
 * one personal documentclass ltxmdf.cls 


/doc/latex/xframed/
- README.txt
- xframed.pdf


/source/latex/xframed/
- Makefile
- xframed.dtx

/tex/latex/xframed
- xframed.sty
- xltxmdf.cls
================================================================
================================================================
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
Working with the command fbox or fcolorbox, one has to
handle page breaks by hand. The present package defines the
environment xframed which automatically deals with page breaks.

Author's name: Marco Daniel 
License type: lppl

==================================================
========Is based on the idea of framed.sty========
==================================================
===== Currently the package has a beta-Status ====
==================================================

 Copyright (c) 2010 Marco Daniel

 This package may be distributed under the terms of the LaTeX Project
 Public License, as described in lppl.txt in the base LaTeX distribution.
 Either version 1.0 or, at your option, any later version.


=================================================
 Erstellung eines Rahmens, der am Seitenende keine
 horizontale Linie einfuegt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      _______________                            
      |    page 1   |                              
      |    Text     |                            
      |  __Text__   |                            
      |  | Text |   |                            
     P A G E B R E A K                           
      |  | Text |   |                            
      |  |_Text_|   |                            
      |    Text     |                            
      |____page 2___|                            
                                                 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
==================================================

\endpreamble
\postamble

================================================================
Copyright (C) 2012 by Marco Daniel

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Marco Daniel.

Have fun!

================================================================
\endpostamble
\usedir{tex/latex/xframed}
\generate{\file{xframed.sty}{\from{xframed.dtx}{package}}}
\Msg{*********************************************************}
\Msg{*}
\Msg{* To finish the installation you have to move the}
\Msg{* following file into a directory searched by TeX:}
\Msg{*}
\Msg{* \space\space documentation.sty}
\Msg{*}
\Msg{* To produce the documentation run the file xframed.dtx}
\Msg{* once through LaTeX. Then, run}
\Msg{*}
\Msg{* \space\space makeindex -s gglo.ist -o xframed.gls xframed.glo}
\Msg{* \space\space makeindex -s gind.ist xframed.idx}
\Msg{*}
\Msg{* through makeIndex to produce the glossary.}
\Msg{* Finally, run PdfLaTeX once again.}
\Msg{*}
\Msg{* To create the examples run (pdf)latex on the tex-files.}
\Msg{*}
\Msg{* That's all!}
\Msg{*}
\Msg{* Happy TeXing!}
\Msg{*********************************************************}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/xframed}
\generate{\file{xframed.ins}
          {\from{xframed.dtx}{install}}}

\nopreamble\nopostamble\usedir{doc/latex/xframed}
\generate{\file{README.txt}
          {\from{xframed.dtx}{readme}}}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
%%$Id: xframed.dtx 6 2012-05-28 18:46:06Z marco $
\setcounter{errorcontextlines}{999}
\documentclass[parskip=false,11pt,]{xltxmdf}
%%%\usepackage[framemethod=TikZ]{xframed}
\usepackage{xparse}
\GetIdInfo$Id: xframed.dtx 6 2012-05-28 18:46:06Z marco $
          {documentation of xframed}

\EnableCrossrefs
\CodelineIndex
%%\RecordChanges
\begin{document}
  \DocInput{xframed.dtx}
\end{document}
%</driver>
% \fi
%
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \GetFileInfo{xframed.sty}
%
%
% \title{The \Pack{xframed} package
%       \footnote{Extending the package \texttt{framed.sty}}}
% \subtitle{auto-split frame environment}
% \author{\href{mailto:marco.daniel@mada-nada.de}{Marco Daniel}}%
% \version{0.01 ALPHA}
% \GetIdInfo$Id: xframed.dtx 6 2012-05-28 18:46:06Z marco $
%           {documentation of xframed}
% \date{\ExplFileDate}
% \introduction{The standard methods for framing text (\Cmd{fbox}
%              or \Cmd{fcolorbox}) require you to handle page breaks
%              by hand, meaning that you have to split the \Cmd{fbox}
%              into two. The present package defines the environment 
%              \Pack{xframed} which automatically deals with pagebreaks
%              in framed text.\par
%              By defining new environments the user may choose between
%              several individual designs.%
%             \par\kern.5\baselineskip\noindent
%             \par\kern.5\baselineskip\noindent
%             FYI:\quad\parbox[t]{.8\linewidth}{%
%                I create a repository for \Pack{xframed}
%                on \href{https://github.com/marcodaniel/xframed}{github}
%                where you can 
%                \href{https://github.com/marcodaniel/xframed}{download}
%                the current development status.}%
% }
%
% \maketitle
%
% \vspace*{2\baselineskip} 
%
% \section{Motivation}
% \clearpage
%
% \section{Implementation}\label{implementation}
%
% And finally, here's how it all works\ldots
%
%\StopEventually{^^A
%  %%\clearpage
%  %%\PrintChanges^^A
%  \clearpage
%  %\PrintIndex^^A
%}
%\iffalse
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%\fi
%
% \subsection{The Explanation of xframed.sty}
%
% %$Id: xframed.dtx 6 2012-05-28 18:46:06Z marco $
% %$Rev: 6 $
% %$Author: marco $
% %$Date: 2012-05-28 20:46:06 +0200 (Mo, 28 Mai 2012) $
% \begin{macro}{\xframedersion,\GetIdInfo}
% Set package information and start header with expl3
%    \begin{macrocode}
\def\xframedversion{v0.01 ALPHA}
\RequirePackage{expl3}
\GetIdInfo$Id: xframed.dtx 6 2012-05-28 18:46:06Z marco $
          {package xframed}

\ProvidesExplPackage{\ExplFileName}
     {\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}

\cs_set_eq:NN \xframedpackagename \ExplFileName

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%  To run the package you need a version of \Pack{expl3} newer than
%  \texttt{2011/09/05}. If such version isn't available the package provides an
%  error and stop the input.
%    \begin{macrocode}
\@ifpackagelater { expl3 } { 2011/09/05 }
  { }
  {
    \PackageError { xframed } { Support~package~expl3~too~old. }
      {
        You~need~to~update~your~installation~of~the~bundles~'l3kernel'~and~
        'l3packages'.\\
        Loading~xframed~will~abort!
      }
    \tex_endinput:D
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_load_check:n}
%  Loading required packages
%    \begin{macrocode}
\msg_new:nnnn { xframed } { package-not-available }
  { Package~'#1'~is~not~available. }
  { The~#1~package~is~not available~but~xframed~needs~the~package~.\\
    For~further~information~see~the~documenation. }

\cs_new_protected:Npn \xframed_load_check:n #1 {
    \IfFileExists {#1.sty}
      { \RequirePackage{#1} }
      { \msg_error:nnx { xframed } { package-not-available } {#1} }
}

\clist_map_function:nN
  { etoolbox , zref-abspage , xparse , l3keys2e  }
    \xframed_load_check:n

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xframed_framemethode_tl,framemethod (Option)}
%  Definining the global option \Opt{framemethod} whereby the method will be
%  save in the token \Cmd{\xframed_framethode_tl}.
%    \begin{macrocode}
\tl_new:N \xframed_framemethode_tl
\cs_new_protected:Npn \xframed_set_framemethod:n #1 
 {
   \clist_if_in:nnT { default , tex , latex , none , 0 }
                    { \tl_expandable_uppercase:n #1 }
                    { \tl_gset \xframed_framemethode_tl { default } }
   \clist_if_in:nnT { pgf , tikz , 1 } 
                    { \tl_expandable_uppercase:n #1 }
                    { \tl_gset \xframed_framemethode_tl { tikz } }
   \clist_if_in:nnT { pstricks , ps , postscript , 2 , 3 }
                    { \tl_expandable_uppercase:n #1 }
                    { \tl_gset \xframed_framemethode_tl { pstricks } }
 }

\keys_define:nn { xframed }
 {
    framemethod .code:n  = \xframed_set_framemethod:n { #1 }  
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_prop_set:Nnn}
% The kernel of \LaTeX3 doesn't provide a command \Cmd{\prop_set:Nnn}. So
% \Pack{xframed} will define its own command.
%    \begin{macrocode}
\cs_new_protected:Npn \xframed_prop_set:Nnn #1 #2 #3
 {
  \prop_del:Nn  #1 { #2 } 
  \prop_put:Nnn #1 { #2 } { #3 }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\l_xframed_lengthoption_prop, all length Option}
% All length option will be saved in the property list
% \Cmd{\l_xframed_lengthoption_prop}. 
%    \begin{macrocode}
\prop_new:N \l_xframed_lengthoption_prop

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_lengthkeys_define:n}
% The command is used inside a loop by \Cmd{clist_map_function:nN} to fill the
% property list with all length options. Simultaneously all option will be
% initializied by \Cmd{\keys_set:nn}
%    \begin{macrocode}
\cs_new_protected:Npn \xframed_lengthkeys_define:n #1
 {
   \xframed_lengthkeys_define_aux:nn #1 \q_stop
 }

\cs_new_protected:Npn \xframed_lengthkeys_define_aux:nn #1==#2 \q_stop 
 {
   \keys_define:nn { xframed }
    {
      #1 .code:n  =  \xframed_prop_set:Nnn \l_xframed_lengthoption_prop 
                                  { #1 } { \dim_eval:n { ##1 } }
    }
  \keys_set:nn  { xframed }
   {
     #1 = { #2 }
   }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{Setting the length option}
% Here the declaration of all length options.
%    \begin{macrocode}
\clist_map_function:nN
 {
   skip-above              ==  \c_zero_dim      ,
   skip-below              ==  \c_zero_dim      ,
   left-margin             ==  \c_zero_dim      ,
   right-margin            ==  \c_zero_dim      ,
   inner-left-margin       ==  10pt             ,
   inner-right-margin      ==  10pt             ,
   inner-top-margin        ==  0.4\baselineskip ,
   inner-bottom-margin     ==  0.4\baselineskip ,
   split-topskip           ==  \c_zero_dim      ,
   split-bottomskip        ==  \c_zero_dim      ,
   outer-margin            ==  \c_zero_dim      ,
   inner-margin            ==  \c_zero_dim      ,
   line-width              ==  0.4pt            ,
   inner-line-width        ==  \c_zero_dim      ,
   middle-line-width       ==  .4pt             ,
   outer-line-width        ==  \c_zero_dim      ,
   round-corner            ==  \c_zero_dim      ,
   footnote-distance       ==  \medskipamount   ,
   footnote-line-width     ==  .8pt             ,
   text-width              ==  \linewidth       ,
   title-above-skip        ==  5pt              ,
   title-below-skip        ==  5pt              ,
   subtitle-above-skip     ==  5pt              ,
   subtitle-below-skip     ==  5pt              ,
   subsubtitle-above-skip  ==  5pt              ,
   subsubtitle-below-skip  ==  5pt              ,
   title-line-width        ==  .2pt             ,
   title-left-margin       ==  10pt             ,
   title-right-margin      ==  10pt             ,
   shadow-size             ==  2pt              ,
   extra-skip-above        ==  \c_zero_dim      ,
   null-skip               ==  \c_zero_dim      ,
 } \xframed_lengthkeys_define:n

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\l_xframed_coloroption_prop, all color Option}
% The syntax is equal to the length option. 
%    \begin{macrocode}
\prop_new:N \l_xframed_coloroption_prop

\cs_new_protected:Npn \xframed_colorkeys_define:n #1
 {
   \xframed_colorkeys_define_aux:nn #1 \q_stop
 }

\cs_new_protected:Npn \xframed_colorkeys_define_aux:nn #1==#2 \q_stop 
 {
   \keys_define:nn { xframed }
    {
      #1 .code:n  =  \xframed_prop_set:Nnn \l_xframed_coloroption_prop 
                                  { #1 } { ##1 }
    }
  \keys_set:nn  { xframed }
   {
     #1 = { #2 }
   }
 }

%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{Setting the color options}
% Here the declaration of all color options.
%    \begin{macrocode}
\clist_map_function:nN
 {
   line-color              ==  black            ,
   bg-color                ==  white            ,
   font-color              ==  black            ,
   inner-line-color        ==  white            ,
   outer-line-color        ==  white            ,
   middle-line-color       ==  white            ,
   title-font-color        ==  black            ,
   title-line-color        ==  black            ,
   title-bg-color          ==  white            ,
   subtitle-font-color     ==  black            ,
   subtitle-line-color     ==  black            ,
   subtitle-bg-color       ==  white            ,
   subsubtitle-font-color  ==  black            ,
   subsubtitle-line-color  ==  black            ,
   subsubtitle-bg-color    ==  white            ,
   shadow-color            ==  black!50         ,
 } \xframed_colorkeys_define:n

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{Setting the bool options}
% Command to define a all bool option with a default value. 
%    \begin{macrocode}
\keys_define:nn { xframed }
 {
  no-ntheorem-preskip  .bool_set:N  = \l_xframed_ntheoremskip_bool     ,
  top-line             .bool_set:N  = \l_xframed_topline_bool          ,
  left-line            .bool_set:N  = \l_xframed_leftline_bool         ,
  bottom-line          .bool_set:N  = \l_xframed_bottomline_bool       ,
  right-line           .bool_set:N  = \l_xframed_rightline_bool        ,
  hide-all-lines       .meta:n      = {
                                       top-line    = #1  ,
                                       left-line   = #1  ,
                                       bottom-line = #1  ,
                                       right-line  = #1  ,
                                      }                                ,
  hide-all-lines        .default:n  = true                             ,
  title-line            .bool_set:N = \l_xframed_titleline_bool        ,
  subtitle-line         .bool_set:N = \l_xframed_subtitleline_bool     ,
  subsubtitle-line      .bool_set:N = \l_xframed_subsubtitleline_bool  ,
  allow-breaking        .bool_set:N = \l_xframed_allowbreaking         ,
  footnote-inside       .bool_set:N = \l_xframed_footnoteinside_bool   ,
  twoside-mode          .bool_set:N = \l_xframed_usetwoside_bool       ,
  repeat-title          .bool_set:N = \l_xframed_repeattitle_bool      ,
  shadow                .bool_set:N = \l_xframed_shadow_bool           ,
  draw-everyline        .bool_set:N = \l_xframed_everyline_bool        ,
  ignore-last-descender .bool_set:N = \l_xframed_descenders_bool       ,
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{Setting the string option}
% All string option will be saved in a token variable.
%    \begin{macrocode}
\keys_define:nn { xframed }
 {
  title                .tl_set:N    = \l_xframed_title_tl              ,
  code-before          .tl_set:N    = \l_xframed_codebefore_tl         ,
  code-after           .tl_set:N    = \l_xframed_codeafter_tl          ,
  code-before          .tl_set:N    = \l_xframed_codebefore_tl         ,
  code-single-frame    .tl_set:N    = \l_xframed_code_single_frame_tl  ,
  code-first-frame     .tl_set:N    = \l_xframed_code_first_frame_tl   ,
  code-middle-frame    .tl_set:N    = \l_xframed_code_middle_frame_tl  ,
  code-last-frame      .tl_set:N    = \l_xframed_code_last_frame_tl    ,
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{Setting the option alignment:,~~for the environment,
%                ~~for the title,~~for the subtitle,~~for the subsubtitle,}
% Here the declaration of the align options.
%    \begin{macrocode}
\tl_new:N \l_xframed_alignment_tl
\tl_new:N \l_xframed_titlealignment_tl
\tl_new:N \l_xframed_subalignment_tl
\tl_new:N \l_xframed_subsubalignment_tl

\keys_define:nn { xframed }
 {
%
  alignment             .choice:     ,
   alignment              / left    .code:n = 
      { \tl_set:Nn \l_xframed_alignment_tl { left } }                  ,
   alignment              / right   .code:n = 
      { \tl_set:Nn \l_xframed_alignment_tl { right } }                 ,
   alignment              / center  .code:n = 
      { \tl_set:Nn \l_xframed_alignment_tl { center } }                ,
%
  alignment-title       .choice:     ,
   alignment-title        / left    .code:n = 
      { \tl_set:Nn \l_xframed_titlealignment_tl { left } }             ,
   alignment-title        / right   .code:n = 
      { \tl_set:Nn \l_xframed_titlealignment_tl { right } }            ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_titlealignment_tl { center } }           ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_titlealignment_tl { justified } }        ,
%
  alignment-subtitle    .choice:     ,
   alignment-title        / left    .code:n = 
      { \tl_set:Nn \l_xframed_subtitlealignment_tl { left } }          ,
   alignment-title        / right   .code:n = 
      { \tl_set:Nn \l_xframed_subtitlealignment_tl { right } }         ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_subtitlealignment_tl { center } }        ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_subtitlealignment_tl { justified } }     ,
%
  alignmentsubsubtitle  .choice:     ,
   alignment-title        / left    .code:n = 
      { \tl_set:Nn \l_xframed_subsubtitlealignment_tl { left } }       ,
   alignment-title        / right   .code:n = 
      { \tl_set:Nn \l_xframed_subsubtitlealignment_tl { right } }      ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_subsubtitlealignment_tl { center } }     ,
   alignment-title        / center  .code:n = 
      { \tl_set:Nn \l_xframed_subsubtitlealignment_tl { justified } }  ,
%
 }

%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{Setting option we will see ;-)}
% Option to pass options to tikz or pstricks
%    \begin{macrocode}
\keys_define:nn { xframed }
 {
  post-tikz-code  .tl_set:N = \l_xframed_extratikz_tl                   ,
  setup-tikz      .code:n   = { \tikzset{tikzsetting/.style = {#1} } }  ,
 }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{option needspace}
% Defining the option needspace \textbf{\color{red} MUST BE CHANGED -- LATER}
%    \begin{macrocode}

%%  \define@key{mdf}{needspace}[\z@]{%
%%       \begingroup%
%%          \setlength{\dimen@}{#1}%
%%          \vskip\z@\@plus\dimen@%
%%          \penalty -100\vskip\z@\@plus -\dimen@%
%%          \vskip\dimen@%
%%          \penalty 9999%
%%          \vskip -\dimen@%
%%          \vskip\z@skip % hide the previous |\vskip| from |\addvspace|
%%        \endgroup%
%%  }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{Unknown option}
% If an unknown option is passed to the package, it will provide an error
% message.
%    \begin{macrocode}
\msg_new:nnnn { xframed } { unknown-option }
  { Unknown~option~'#1'. }
  {
    The~option~file~'#1'~is~not~known~by~xframed:
    perhaps~it~is~spelled~incorrectly.
  }

\keys_define:nn { xframed }
 {
  unknown .code:n =
        {
         \msg_error:nnx { xframed } { unknown-option }
                        { \exp_not:V \l_keys_key_tl }
        }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ProcessKeysOptions}
% Explained in the documentation of \Pack{l3keys2e}.
%    \begin{macrocode}
\ProcessKeysOptions { xframed }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframedsetup}
%    \begin{macrocode}
\NewDocumentCommand \xframedsetup { m }
 {
 \keys_set:nn { xframed } { #1 }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{style (option)}
%    \begin{macrocode}
\msg_new:nnnn { xframed } { unknown-style }
  { Unknown~style~'#1'. }
  {
    The~style~'#1'~is~not~known~by~xframed:
    perhaps~it~is~spelled~incorrectly.
  }
\keys_define:nn { xframed }
 {
  style .code:n =
    {
     \cs_if_exist:cTF { xframed_stylename_#1 }
      {
       \xframedsetup { \use:c { xframed_stylename_#1 } }
      }
      {
       \msg_error:nnx { xframed } { unknown-style }
                      { \exp_not:V \l_keys_key_tl }
      }
    }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\l_xframed_store_one_coffin,\l_xframed_store_two_coffin,
%               \l_xframed_store_save_coffin,\l_xframed_store_footnotes_coffin,
%               \l_xframed_store_title_coffin,\l_xframed_store_subtitle_coffin,
%               \l_xframed_store_subtitle_coffin}
%  Initialize all coffins which will save user material
%    \begin{macrocode}
\coffin_new:N \l_xframed_store_one_coffin
\coffin_new:N \l_xframed_store_two_coffin
\coffin_new:N \l_xframed_store_save_coffin
\coffin_new:N \l_xframed_store_footnotes_coffin
\coffin_new:N \l_xframed_store_title_coffin
\coffin_new:N \l_xframed_store_subtitle_coffin
\coffin_new:N \l_xframed_store_subsubtitle_coffin

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\l_xframed_coffin_width_dim}
%    \begin{macrocode}
\dim_new:N \l_xframed_coffin_width_dim

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_calculate_width:}
% This command calculates the with of the coffin based on the user input. 
%    \begin{macrocode}
\cs_new:Npn \xframed_calculate_width:
 {
  \dim_set:Nn \l_xframed_coffin_width_dim { \linewidth }
  \clist_map_inline:nn 
    { 
     left-margin , outer-line-width , middle-line-width , inner-line-width , 
     inner-left-margin , inner-right-margin , inner-line-width , 
     middle-line-width , outer-line-width , right-margin
    }
    {
     \dim_sub:Nn \l_xframed_coffin_width_dim 
           { 
            \prop_get:Nn \l_xframed_lengthoption_prop { ##1 }
           }
    }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{xframed (environment)}
% The definition of the main environment of the package.
%    \begin{macrocode}
\NewDocumentEnvironment { xframed } { O{} }
 {
%    \end{macrocode}
% The start part of the environment
%    \begin{macrocode}
 \group_begin:
   \xframedsetup { #1 }  
   \xframed_trivlist:
    \item\relax
    \xframed_calculate_width: 
    \vcoffin_set:Nnw   \l_xframed_store_one_coffin 
                     { \l_xframed_coffin_width_dim }
    \linewidth\hsize
    \textwidth\hsize
 }
%    \end{macrocode}
% The end part of the environment
%    \begin{macrocode}
 {
%    \end{macrocode}
% Try to fix the last vertical skip of environments and equations
%    \begin{macrocode}
    \xframed_last_coffin_line:
    \vcoffin_set_end:
%    \end{macrocode}
% End coffin input and start output
%    \begin{macrocode}
%    \coffin_rotate:Nn \l_xframed_store_one_coffin { 0 } % must be <0
     \xframed_proces_contents: % THE OUTPUT ROUTINE
   \endxframed_trivlist:
  \group_end:
  \@doendpe
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_trivlist:}
% At the moment the environment is defined with \LaTeXe. I have no idea how to
% fix this.
%    \begin{macrocode}
\cs_new:Npn \xframed_trivlist:
 {
  \setlength{\topsep}
         { \prop_get:Nn \l_xframed_lengthoption_prop { skip-above } }
  \parsep\parskip
  \@nmbrlistfalse
  \@trivlist
  \labelwidth\z@
  \leftmargin\z@
  \itemindent\z@
  \let\@itemlabel\@empty
  \def\makelabel##1{##1}
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\endxframed_trivlist:}
% At the moment the environment is defined with \LaTeXe. I have no idea how to
% fix this.
%    \begin{macrocode}
\cs_new:Npn \endxframed_trivlist:
 {
  \if@inlabel
    \leavevmode
    \global \@inlabelfalse
  \fi
  \if@newlist
    \@noitemerr
    \global \@newlistfalse
  \fi
  \ifhmode\unskip \par
  \else
    \@inmatherr{\end{\@currenvir}}%
  \fi
  \if@noparlist \else
    \ifdim\lastskip >\z@
      \@tempskipa\lastskip \vskip -\lastskip
      \advance\@tempskipa\parskip \advance\@tempskipa -\@outerparskip
      \vskip\@tempskipa
    \fi
    \addpenalty\@endparpenalty
    \addvspace { \prop_get:Nn \l_xframed_lengthoption_prop { skip-below } }
    \@endpetrue
  \fi
 }


%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{ToDo to handle the input}
%  This routine start the process to print out the contents. Therefor the 
%  following things must be happen:
%  \begin{enumerate}
%   \item handle title
%   \item handle footnotes
%   \item check if used inside a non splittable part
%   \item \ldots
%  \end{enumerate}
% First create a new message which will be called if the environment
% \Env{xframed} ist used inside a non breakable environment like \Env{minipage}
% or \Env{figure}
%    \begin{macrocode}
\msg_new:nnnn { xframed } { inside-box }
  { Environment~xframed~is~used~inside~a~non~breakable~box. }
  {
    You~are~using~the~environment~xframed~inside~a~non~breakable\\
    box.~By~this~the~option~nobreak~is~used.~For~further~information\\
    see~the~documentation.
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_test_if_splittable:,\xframed_boolexpr_if:n}
%  Define a stand alone function which test the surrounding environment.
%    \begin{macrocode}
\prg_new_conditional:Npnn \xframed_boolexpr_if:n #1 { T , F , TF }
 {
  \if_predicate:w \bool_if_p:n {#1}
     \prg_return_true:
  \else:
     \prg_return_false:
  \fi:
 }

\cs_new:Npn \xframed_test_if_splittable:
 {
  \xframed_boolexpr_if:nTF 
    {
      \cs_if_exist_p:N \@captype             || 
      \if@minipage 1 \else 0 \fi             ||
      \ifinner     1 \else 0 \fi             ||
      \bool_if_p:N \l_xframed_nobreak_bool
    }
    {
     \bool_if:NF \l_xframed_nobreak_bool
       {
        \msg_warning:nn { xframed } { inside-box }
       }
     \xframed_use_nosplittable_output:   
     \msg_term:x { line~\msg_line_number:\ ~xframed~uses~nonsplittable~output }
    }
    {
     \xframed_use_splittable_output: 
     \msg_term:x { line~\msg_line_number:\ ~xframed~uses~splittable~output }
    }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}
\cs_new:Npn \xframed_proces_contents: 
 {
  \xframed_check_title_first:
  \xframed_test_if_splittable:
 }
\cs_new:Npn \xframed_use_nosplittable_output:
 {
  \coffin_display_handles:Nn \l_xframed_store_one_coffin { blue!70!black }
 }
\cs_new:Npn \xframed_use_splittable_output:
 {
  \coffin_display_handles:Nn \l_xframed_store_one_coffin { red!70!black }
 }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_check_title_first:}%
% If a title is given the title coffin will joined with the contents coffin.
% The command includes the correct computing of the distance between the title
% and the contents of the user input.
%    \begin{macrocode}
\cs_new:Npn \xframed_check_title_first:
 {
  \tl_if_blank:VTF \l_xframed_title_tl
    {
     \msg_term:x { line~\msg_line_number:\ ~title~is~empty~or~space~filled }
    }
    {
     \msg_term:x { line~\msg_line_number:\ ~title~isn't~empty,~save~in~coffin }
     \bool_if:NF \l_xframed_titleline_bool
       {
        \xframed_prop_set:Nnn \l_xframed_lengthoption_prop 
                              { title-line-width } 
                              { \c_zero_dim }
       }
     \vcoffin_set:Nnn   \l_xframed_store_title_coffin 
                      { \l_xframed_coffin_width_dim   }
                      { \tl_trim_spaces:N \l_xframed_title_tl
                        \tl_use:N \l_xframed_title_tl }  
%     \coffin_display_handles:Nn \l_xframed_store_title_coffin { red!70!black }
     \coffin_join:NnnNnnnn \l_xframed_store_one_coffin { hc } { t }
                           \l_xframed_store_title_coffin { hc } { b }
                           { 0pt }%extra x sep
                           { 
                            \prop_get:Nn \l_xframed_lengthoption_prop 
                                         { title-below-skip }
                            +
                            \prop_get:Nn \l_xframed_lengthoption_prop 
                                         { title-line-width }
                            +
                            \prop_get:Nn \l_xframed_lengthoption_prop 
                                         { inner-top-margin }
                           }
    }
 }

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_check_footnote:}%
% If footnotes are given they are saved inside the coffin
% \Cmd{\l_xframed_footnotes_coffin}. If the footnotes should be printed inside
% the environment, the coffins must be joined. A coffin is a box so the test
% \Cmd{\box_if_empty:NF} is used.
%    \begin{macrocode}
\cs_new:Npn \xframed_check_footnotes:
 {
  \box_if_empty:NTF \l_xframed_store_footnotes_coffin
    {
     \msg_term:x { line~\msg_line_number:\ ~no~footnote~presented }
    }
    {
     \msg_term:x { line~\msg_line_number:\ ~footnotes~are~found }
     \bool_if:NTF \l_xframed_footnoteinside_bool
       {
        \msg_term:x { line~\msg_line_number:\ ~footnotes~inside~--~joined }
%        \coffin_display_handles:Nn \l_xframed_store_footnotes_coffin { red }
        \coffin_join:NnnNnnnn \l_xframed_store_one_coffin { hc } { b }
                              \l_xframed_store_footnotes_coffin { hc } { t }
                              { 0pt }%extra x sep
                              { 
                               \prop_get:Nn \l_xframed_lengthoption_prop 
                                             { footnote-distance }
                                +
                               \prop_get:Nn \l_xframed_lengthoption_prop 
                                         { footnote-line-width }
                              }
       }
       {
        \msg_term:x { line~\msg_line_number:\ ~footnotes~outside }
       }
    }
 }

%    \end{macrocode}
% \end{macro}

%
% \begin{macro}{FOOTNOTES}
%  \textbf{\color{red} THE FOLLOWING IS ONLY COPIED SO I DON'T FORGET IT}
%    \begin{macrocode}
\cs_new:Npn \xframed_footnote_must_be_declared:
 {
   START
   \def\@mpfn{mpfootnote}%
   \def\thempfn{\thempfootnote}%
   \c@mpfootnote\z@%
   \let\@footnotetext\@mpfootnotetext%
   OUTPUT
     \ifvoid\@mpfootins\else%
          \nobreak%
          \vskip\mdf@footenotedistance@length%
          \normalcolor%
          \mdf@footnoterule%
          \unvbox\@mpfootins%
     \fi%
   FOOTNOTERULE
    \kern0\p@%
    \hrule \@width 1in \kern 2.6\p@
 }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\xframed_measure_free_vspace:}
% The main idea based on the great package \Pack{multicol} of Frank Mittelbach.
% In his documentation he wrote the following:
% \begin{quote}
%    The |\enough@room| macro used
%    above isn't perfect but works reasonably well in this context. We
%    measure the free space on the current page by subtracting
%    |\pagetotal| from |\pagegoal|. This isn't entirely
%    correct since it doesn't take the `shrinking' (i.e.\
%    |\pageshrink|) into account.  The `recent contribution list'
%    might be nonempty so we start with |\par| and an explicit
%    |\penalty|.\footnote{See the documentation of 
%    \Cmd{endmulticols} for further details.}
%    Actually, we use |\addpenalty| to ensure that a following
%    |\addvspace| will `see' the vertical space that might be
%    present.
%    The use of |\addpenalty| will have the effect that all items from
%    the recent contributions will be moved to the main vertical list
%    and the |\pagetotal| value will be updated correctly. However,
%    the penalty will be placed in front of any dangling glue item
%    with the result that the main vertical list may already be
%    overfull even if \TeX{} is not invoking the output routine.\par\vdots
%
%    To empty the contribution list the first release contained a
%    penalty zero but this had the result that |\addvspace| couldn't
%    detect preceding glue. So this was changed to |\addpenalty|. But
%    this turned out to be not enough as |\addpenalty| will not add a
%    penalty when |@nobreak| is true. Therefore we force this switch
%    locally to false. As a result there may be a break between
%    preceding text and the start of a multicols environment, but this
%    seems acceptable since there is the optional argument for exactly
%    this reason.
% \end{quote}
%
%  The following code of this package is relavant:
%    \begin{verbatim}
%   \bgroup\@nobreakfalse\addpenalty\z@\egroup
%   \page@free \pagegoal
%   \advance \page@free -\pagetotal
%   \@tempskipa#1\relax
%   \mult@info\z@
%       {Current page:\MessageBreak
%        height=%
%        \the\pagegoal: used \the\pagetotal
%        \space -> free=\the\page@free
%        \MessageBreak
%        needed \the\@tempskipa
%              \space(for #1)}%
%   \ifdim \page@free <#1\newpage \fi
%    \end{verbatim}
%
%    \begin{macrocode}
\cs_new:Npn \xframed_measure_free_vspace:
 {


 }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}

%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}

%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\xframed_last_coffin_line:}
%  This code trys to ignore descendes and last vertical skip of environments.
%    \begin{macrocode}
\cs_new:Npn \xframed_last_coffin_line:
{
%    \end{macrocode}
% Try to fix the last vertical skip of environments and equations
%    \begin{macrocode}
    \par \tex_unskip:D
    \skip_vertical:N \tex_lastskip:D
%    \end{macrocode}
% Trying to ignore descenders
%    \begin{macrocode}
    \par
    \hbox:n { 
             \tex_vrule:D width  0   pt 
                          height 0.7 \tex_baselineskip:D 
                          depth  0.3 \tex_baselineskip:D
             \scan_stop: 
            }
    \par \tex_unskip:D \tex_unskip:D
    \setbox0=\lastbox
    \skip_vertical:n { 0.7 \tex_baselineskip:D - \tex_baselineskip:D }
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{}
%    \begin{macrocode}
  \tex_endinput:D

%    \end{macrocode}
% \end{macro}
%
%\iffalse
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%\fi

